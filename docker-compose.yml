services:
  # Database
  postgres:
    image: postgres:15
    container_name: fishing-chat-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fishing_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue는 Amazon MQ로 이전됨
  # 기존 RabbitMQ 컨테이너 제거

  # Backend API
  chat-api:
    image: 859727769026.dkr.ecr.ap-northeast-2.amazonaws.com/fishing-booking-chat-api:latest
    container_name: fishing-chat-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=amazon-mq
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fishing_chat
      - DB_USER=postgres
      - DB_PASSWORD=password123
      # Amazon MQ 엔드포인트로 변경
      - RABBITMQ_HOST=b-12345678-1234-1234-1234-123456789012.mq.ap-northeast-2.amazonaws.com
      - RABBITMQ_PORT=5671
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=password123
      - RABBITMQ_SSL_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chat-network
    restart: unless-stopped

  # Frontend Web
  web:
    image: 859727769026.dkr.ecr.ap-northeast-2.amazonaws.com/fishing-booking-web:latest
    container_name: fishing-chat-web
    ports:
      - "80:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      - chat-api
    networks:
      - chat-network
    restart: unless-stopped

networks:
  chat-network:
    driver: bridge

volumes:
  postgres_data:
